{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flask-Express - ExpressJs apis for Flask \u00b6 Introduction \u00b6 Flask-Express is here to give you the feel like ExpressJs while using the Flask app. Basically you can use the default Request and Response as two parameters of the view functions. Flask-Express comes with all the features of Flask with some extra features. We are using the munch module to provide the attribute-style access very similar to the Javascript. I think this is enough for the introdunction, let's dig into the key features and the installation process. Key Features \u00b6 It's provides you the feel of ExpressJs while using a Python based framework. The Resquest and The Response objects are easily available. It's clean and ExpressJs like apis provides a very readble syntex of your code. Support of Munch module gives a very advnatage and understandable attribute type parameters . Rich test cases support using pytest module. MKDocs based advanced documentation system. Installation \u00b6 The installation process is very similar to the other Python module installation process. You can install it directly from the PYPI using pip or from the source code . Install or update from PYPI \u00b6 python -m pip install -U Flask-Express Install from source code \u00b6 git clone https://github.com/marktennyson/flask-express && cd flask-express python -m pip install -U . A Basic Demo \u00b6 inbuilt flask_express . FlaskExpress class ``` python from flask_express import FlaskExpress app = FlaskExpress ( __name__ ) @app . get ( \"/\" ) def index ( req , res ): return res . json ( req . header ) @app . get ( \"/index-2\" ) async def index_2 ( req , res ): return res . json ( req . header )","title":"Flask-Express"},{"location":"#flask-express-expressjs-apis-for-flask","text":"","title":"Flask-Express - ExpressJs apis for Flask"},{"location":"#introduction","text":"Flask-Express is here to give you the feel like ExpressJs while using the Flask app. Basically you can use the default Request and Response as two parameters of the view functions. Flask-Express comes with all the features of Flask with some extra features. We are using the munch module to provide the attribute-style access very similar to the Javascript. I think this is enough for the introdunction, let's dig into the key features and the installation process.","title":"Introduction"},{"location":"#key-features","text":"It's provides you the feel of ExpressJs while using a Python based framework. The Resquest and The Response objects are easily available. It's clean and ExpressJs like apis provides a very readble syntex of your code. Support of Munch module gives a very advnatage and understandable attribute type parameters . Rich test cases support using pytest module. MKDocs based advanced documentation system.","title":"Key Features"},{"location":"#installation","text":"The installation process is very similar to the other Python module installation process. You can install it directly from the PYPI using pip or from the source code .","title":"Installation"},{"location":"#install-or-update-from-pypi","text":"python -m pip install -U Flask-Express","title":"Install or update from PYPI"},{"location":"#install-from-source-code","text":"git clone https://github.com/marktennyson/flask-express && cd flask-express python -m pip install -U .","title":"Install from source code"},{"location":"#a-basic-demo","text":"inbuilt flask_express . FlaskExpress class ``` python from flask_express import FlaskExpress app = FlaskExpress ( __name__ ) @app . get ( \"/\" ) def index ( req , res ): return res . json ( req . header ) @app . get ( \"/index-2\" ) async def index_2 ( req , res ): return res . json ( req . header )","title":"A Basic Demo"},{"location":"changelog/","text":"0.1.0 \u00b6 renamed the module name to flask-express from flaske to make it a extension of Flask. 0.1.1 \u00b6 Some typo fixed at README.md. Some typo fixed at Munch module. Added the proper logo. 0.1.2 \u00b6 Fixed flask-admin related issue. Added MKDocs based documentation. 0.1.3 \u00b6 Fixed attachment directory related issue Now the user have the power to add custom attachment folder. showing proper error message when attached file is absent at the attachment directory. added more CamelCase method to the response.Response class. Fixed issubclass checking error for different contents at response.Response.send method. Fixed status_code method for response.Response class not working. Fixed response.Response.type method. Renamed response.Response.set_staus and response.Response.setStatus methods to response.Response.send_status and response.Response.sendStatus responsively.","title":"Changelog"},{"location":"changelog/#010","text":"renamed the module name to flask-express from flaske to make it a extension of Flask.","title":"0.1.0"},{"location":"changelog/#011","text":"Some typo fixed at README.md. Some typo fixed at Munch module. Added the proper logo.","title":"0.1.1"},{"location":"changelog/#012","text":"Fixed flask-admin related issue. Added MKDocs based documentation.","title":"0.1.2"},{"location":"changelog/#013","text":"Fixed attachment directory related issue Now the user have the power to add custom attachment folder. showing proper error message when attached file is absent at the attachment directory. added more CamelCase method to the response.Response class. Fixed issubclass checking error for different contents at response.Response.send method. Fixed status_code method for response.Response class not working. Fixed response.Response.type method. Renamed response.Response.set_staus and response.Response.setStatus methods to response.Response.send_status and response.Response.sendStatus responsively.","title":"0.1.3"},{"location":"examples/","text":"Some basic examples of Flask-Express \u00b6 from flask_express import FlaskExpress from flask import session , current_app from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SECRET_KEY' ] = \"this is the secret key.\" # app.config['ATTACHMENTS_FOLDER'] = 'templates' @app . route ( \"/\" ) async def index ( req : Request , res : Response ): context = dict ( name = \"Aniket sarkar\" , description = \"basic demo page.\" ) return res . render ( \"index.html\" , context = context ) @app . route ( \"/set-status\" ) def set_statuser ( req : Request , res : Response ): # return res.Response(json.dumps({\"status\":200}), mimetype=\"application/json\") return res . send_status ( 404 ) . send ( \"your requested page is not found.\" ) @app . route ( \"/mrp\" ) def mrp ( req : Request , res : Response ): print ( current_app . config . get ( \"ATTACHMENTS_FOLDER\" )) res . type ( \"application/json\" ) print ( res . get ( \"Content-Type\" )) res . set_cookie ( \"cookie_key\" , 'aniketsarkar' ) print ( res . headers ) print ( app . config ) print ( app . config [ 'ATTACHMENTS_FOLDER' ]) return res . attachment ( \"hello.txt\" ) # attachment should be stored in attachment folder. @app . route ( \"/check-session\" ) def check_session ( req : Request , res : Response ): ss = dict ( session ) # print (ss) ss [ 'name1' ] = 'aniket' # session['name'] = \"aniket\" print ( ss ) return res . send ( \"data\" ) @app . route ( \"/check-session-2/\" ) def check_session_2 ( req : Request , res : Response ): print ( req . session ) return res . send ( \"data2\" ) @app . get ( \"/check-query-params/\" ) def check_query_params ( req : Request , res : Response ): res . json ( req . query ) @app . get ( \"/check-headers/\" ) def check_headers ( req : Request , res : Response ): return res . send ( req . header [ \"Accept-Encoding\" ]) @app . get ( \"/redirect\" ) def redirector ( req : Request , res : Response ): return res . send_status ( 308 ) . redirect ( \"https://www.google.com\" ) @app . get ( \"/set-session\" ) def set_session ( req : Request , res : Response ): req . session [ 'username' ] = 'aniketsarkar' return res . send ( 'OK' ) @app . get ( \"/get-session\" ) def get_session ( req : Request , res : Response ): username = req . session . get ( 'username' ) return res . send ( dict ( username = username )) @app . get ( \"/check-flash\" ) def check_flash ( req : Request , res : Response ): return res . send_status ( 403 ) . send ( dict ( name = \"test_simple_json\" )) @app . get ( \"/check-type\" ) def check_type ( req : Request , res : Response ): return res . type ( \"json\" ) . end () if __name__ == \"__main__\" : app . run ( debug = True , port = 8080 ) Example with flask-admin, flask-sqlalchemy \u00b6 app.py file \u00b6 from flask_express import FlaskExpress from flask_admin import Admin from flask_admin.contrib.sqla import ModelView from flask_migrate import Migrate import typing as t from models import * if t . TYPE_CHECKING : from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'sqlite:///db.sqlite3' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = True app . config [ 'SECRET_KEY' ] = 'world-secret-key' admin = Admin ( app , name = 'microblog' , template_mode = 'bootstrap4' ) db . init_app ( app ) admin . add_view ( ModelView ( AgentChangePasswordOtp , db . session )) _ = Migrate ( app , db ) @app . get ( '/' ) def index ( req : \"Request\" , response : \"Response\" ): return response . json ( name = 'index' ) @app . get ( \"/index\" ) def index_2 ( req : \"Request\" , res : \"Response\" ): return res . flash ( \"message\" ) . end ( 404 ) if __name__ == '__main__' : app . run ( debug = True ) models.py file \u00b6 from flask_sqlalchemy import SQLAlchemy from datetime import datetime db : \"SQLAlchemy\" = SQLAlchemy () class AgentChangePasswordOtp ( db . Model ): id = db . Column ( db . Integer , primary_key = True ) contactnumber = db . Column ( db . String ( 100 )) otp = db . Column ( db . String ( 100 )) created_on = db . Column ( db . DateTime , nullable = False , default = datetime . now ()) Example with Flask-Tortoise \u00b6 Flask-Tortoise provides a simple asynchronous ORM service. Here I have tried to add some examples of Flask-Express with Flask-Tortoise . app.py file \u00b6 # from flask import jsonify, Flask from flask_express import FlaskExpress from models import * from random import choice from script import GenerateData import typing as t if t . TYPE_CHECKING : from flask_express.typing import Request , Response STATUSES = [ \"New\" , \"Old\" , \"Gone\" ] app : \"FlaskExpress\" = FlaskExpress ( __name__ ) app . config [ 'TORTOISE_ORM_DATABASE_URI' ] = 'sqlite://db.sqlite3' app . config [ 'TORTOISE_ORM_MODELS' ] = \"models\" models . init_app ( app ) @app . get ( \"/\" ) async def list_all ( req : \"Request\" , res : \"Response\" ): users = await Users . all () workers = await Workers . all () co_workers = await CoWorker . all () return res . json ( { \"users\" : [ str ( user ) for user in users ], \"workers\" : [ str ( worker ) for worker in workers ], \"co-wrokers\" : [ str ( co_worker ) for co_worker in co_workers ]} ) @app . get ( \"/user\" ) async def add_user ( req : \"Request\" , res : \"Response\" , ): user = await Users . create ( status = choice ( STATUSES )) # nosec return str ( user ) @app . get ( \"/worker\" ) async def add_worker ( req : \"Request\" , res : \"Response\" , ): worker = await Workers . create ( status = choice ( STATUSES )) # nosec return str ( worker ) @app . get ( \"/get-worker\" ) async def get_worker ( req : \"Request\" , res : \"Response\" , ): worker : \"Workers\" = await Workers . get ( id = 1 ) return str ( worker . status ) @app . get ( \"/co-workers\" ) async def co_workers ( req : \"Request\" , res : \"Response\" , ): user = await Users . get ( id = 1 ) co_worker : \"CoWorker\" = await CoWorker . create ( name = \"Aniket Sarkar\" , rltn = user ) return str ( co_worker ) @app . get ( \"/get-coworker/<int:id>\" ) async def aniket ( req : \"Request\" , res : \"Response\" , id ): pk = id co_worker = await CoWorker . get_or_404 ( pk = pk , description = f \"user object not found at ID: { pk } \" ) return res . json ( name = str ( co_worker . name )) @app . get ( \"/delete-coworker/<int:id>\" ) async def delete_coworker ( id ): c = await CoWorker . get_or_404 ( id = id ) await c . delete () return \"object deleted\" @app . get ( \"/sarkar\" ) async def sarkar ( req : \"Request\" , res : \"Response\" , ): user = await Users . filter ( pk = 1 ) . first_or_404 () return res . json ( name = str ( user )) @app . get ( \"/paginate\" ) async def paginator ( req : \"Request\" , res : \"Response\" , ): user = await Users . paginate () print ( user ) return res . send ( \"none\" ) @app . get ( \"/create-data\" ) async def create_data ( req : \"Request\" , res : \"Response\" ): r1 = await GenerateData . generate_user () r2 = await GenerateData . generate_worker () r3 = await GenerateData . generate_co_worker () return res . send ( \"Done\" ) @app . get ( \"/create-co-worker\" ) async def create_co_worker ( req : \"Request\" , res : \"Response\" ): await GenerateData . generate_co_worker () return res . send ( \"Done\" ) if __name__ == '__main__' : app . run ( debug = True , port = 8080 ) models.py file \u00b6 from flask_tortoise import Tortoise , Manager models : \"Tortoise\" = Tortoise () class Users ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) # name = fields.CharField(20, null=True) def __str__ ( self ): return f \"User { self . id } : { self . status } \" class Meta : manager = Manager () class Workers ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) def __str__ ( self ): return f \"Worker { self . id } : { self . status } \" class Meta : manager = Manager () class CoWorker ( models . Model ): id = models . IntField ( pk = True ) name = models . CharField ( max_length = 255 ) rltn = models . ForeignKeyField ( f \"models.Users\" , on_delete = models . CASCADE ) created_at = models . DatetimeField ( auto_now_add = True ) class Meta : manager = Manager () def __str__ ( self ): return f \"Co-Worker { self . id } : { self . name } \"","title":"Examples"},{"location":"examples/#some-basic-examples-of-flask-express","text":"from flask_express import FlaskExpress from flask import session , current_app from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SECRET_KEY' ] = \"this is the secret key.\" # app.config['ATTACHMENTS_FOLDER'] = 'templates' @app . route ( \"/\" ) async def index ( req : Request , res : Response ): context = dict ( name = \"Aniket sarkar\" , description = \"basic demo page.\" ) return res . render ( \"index.html\" , context = context ) @app . route ( \"/set-status\" ) def set_statuser ( req : Request , res : Response ): # return res.Response(json.dumps({\"status\":200}), mimetype=\"application/json\") return res . send_status ( 404 ) . send ( \"your requested page is not found.\" ) @app . route ( \"/mrp\" ) def mrp ( req : Request , res : Response ): print ( current_app . config . get ( \"ATTACHMENTS_FOLDER\" )) res . type ( \"application/json\" ) print ( res . get ( \"Content-Type\" )) res . set_cookie ( \"cookie_key\" , 'aniketsarkar' ) print ( res . headers ) print ( app . config ) print ( app . config [ 'ATTACHMENTS_FOLDER' ]) return res . attachment ( \"hello.txt\" ) # attachment should be stored in attachment folder. @app . route ( \"/check-session\" ) def check_session ( req : Request , res : Response ): ss = dict ( session ) # print (ss) ss [ 'name1' ] = 'aniket' # session['name'] = \"aniket\" print ( ss ) return res . send ( \"data\" ) @app . route ( \"/check-session-2/\" ) def check_session_2 ( req : Request , res : Response ): print ( req . session ) return res . send ( \"data2\" ) @app . get ( \"/check-query-params/\" ) def check_query_params ( req : Request , res : Response ): res . json ( req . query ) @app . get ( \"/check-headers/\" ) def check_headers ( req : Request , res : Response ): return res . send ( req . header [ \"Accept-Encoding\" ]) @app . get ( \"/redirect\" ) def redirector ( req : Request , res : Response ): return res . send_status ( 308 ) . redirect ( \"https://www.google.com\" ) @app . get ( \"/set-session\" ) def set_session ( req : Request , res : Response ): req . session [ 'username' ] = 'aniketsarkar' return res . send ( 'OK' ) @app . get ( \"/get-session\" ) def get_session ( req : Request , res : Response ): username = req . session . get ( 'username' ) return res . send ( dict ( username = username )) @app . get ( \"/check-flash\" ) def check_flash ( req : Request , res : Response ): return res . send_status ( 403 ) . send ( dict ( name = \"test_simple_json\" )) @app . get ( \"/check-type\" ) def check_type ( req : Request , res : Response ): return res . type ( \"json\" ) . end () if __name__ == \"__main__\" : app . run ( debug = True , port = 8080 )","title":"Some basic examples of Flask-Express"},{"location":"examples/#example-with-flask-admin-flask-sqlalchemy","text":"","title":"Example with flask-admin, flask-sqlalchemy"},{"location":"examples/#apppy-file","text":"from flask_express import FlaskExpress from flask_admin import Admin from flask_admin.contrib.sqla import ModelView from flask_migrate import Migrate import typing as t from models import * if t . TYPE_CHECKING : from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'sqlite:///db.sqlite3' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = True app . config [ 'SECRET_KEY' ] = 'world-secret-key' admin = Admin ( app , name = 'microblog' , template_mode = 'bootstrap4' ) db . init_app ( app ) admin . add_view ( ModelView ( AgentChangePasswordOtp , db . session )) _ = Migrate ( app , db ) @app . get ( '/' ) def index ( req : \"Request\" , response : \"Response\" ): return response . json ( name = 'index' ) @app . get ( \"/index\" ) def index_2 ( req : \"Request\" , res : \"Response\" ): return res . flash ( \"message\" ) . end ( 404 ) if __name__ == '__main__' : app . run ( debug = True )","title":"app.py file"},{"location":"examples/#modelspy-file","text":"from flask_sqlalchemy import SQLAlchemy from datetime import datetime db : \"SQLAlchemy\" = SQLAlchemy () class AgentChangePasswordOtp ( db . Model ): id = db . Column ( db . Integer , primary_key = True ) contactnumber = db . Column ( db . String ( 100 )) otp = db . Column ( db . String ( 100 )) created_on = db . Column ( db . DateTime , nullable = False , default = datetime . now ())","title":"models.py file"},{"location":"examples/#example-with-flask-tortoise","text":"Flask-Tortoise provides a simple asynchronous ORM service. Here I have tried to add some examples of Flask-Express with Flask-Tortoise .","title":"Example with Flask-Tortoise"},{"location":"examples/#apppy-file_1","text":"# from flask import jsonify, Flask from flask_express import FlaskExpress from models import * from random import choice from script import GenerateData import typing as t if t . TYPE_CHECKING : from flask_express.typing import Request , Response STATUSES = [ \"New\" , \"Old\" , \"Gone\" ] app : \"FlaskExpress\" = FlaskExpress ( __name__ ) app . config [ 'TORTOISE_ORM_DATABASE_URI' ] = 'sqlite://db.sqlite3' app . config [ 'TORTOISE_ORM_MODELS' ] = \"models\" models . init_app ( app ) @app . get ( \"/\" ) async def list_all ( req : \"Request\" , res : \"Response\" ): users = await Users . all () workers = await Workers . all () co_workers = await CoWorker . all () return res . json ( { \"users\" : [ str ( user ) for user in users ], \"workers\" : [ str ( worker ) for worker in workers ], \"co-wrokers\" : [ str ( co_worker ) for co_worker in co_workers ]} ) @app . get ( \"/user\" ) async def add_user ( req : \"Request\" , res : \"Response\" , ): user = await Users . create ( status = choice ( STATUSES )) # nosec return str ( user ) @app . get ( \"/worker\" ) async def add_worker ( req : \"Request\" , res : \"Response\" , ): worker = await Workers . create ( status = choice ( STATUSES )) # nosec return str ( worker ) @app . get ( \"/get-worker\" ) async def get_worker ( req : \"Request\" , res : \"Response\" , ): worker : \"Workers\" = await Workers . get ( id = 1 ) return str ( worker . status ) @app . get ( \"/co-workers\" ) async def co_workers ( req : \"Request\" , res : \"Response\" , ): user = await Users . get ( id = 1 ) co_worker : \"CoWorker\" = await CoWorker . create ( name = \"Aniket Sarkar\" , rltn = user ) return str ( co_worker ) @app . get ( \"/get-coworker/<int:id>\" ) async def aniket ( req : \"Request\" , res : \"Response\" , id ): pk = id co_worker = await CoWorker . get_or_404 ( pk = pk , description = f \"user object not found at ID: { pk } \" ) return res . json ( name = str ( co_worker . name )) @app . get ( \"/delete-coworker/<int:id>\" ) async def delete_coworker ( id ): c = await CoWorker . get_or_404 ( id = id ) await c . delete () return \"object deleted\" @app . get ( \"/sarkar\" ) async def sarkar ( req : \"Request\" , res : \"Response\" , ): user = await Users . filter ( pk = 1 ) . first_or_404 () return res . json ( name = str ( user )) @app . get ( \"/paginate\" ) async def paginator ( req : \"Request\" , res : \"Response\" , ): user = await Users . paginate () print ( user ) return res . send ( \"none\" ) @app . get ( \"/create-data\" ) async def create_data ( req : \"Request\" , res : \"Response\" ): r1 = await GenerateData . generate_user () r2 = await GenerateData . generate_worker () r3 = await GenerateData . generate_co_worker () return res . send ( \"Done\" ) @app . get ( \"/create-co-worker\" ) async def create_co_worker ( req : \"Request\" , res : \"Response\" ): await GenerateData . generate_co_worker () return res . send ( \"Done\" ) if __name__ == '__main__' : app . run ( debug = True , port = 8080 )","title":"app.py file"},{"location":"examples/#modelspy-file_1","text":"from flask_tortoise import Tortoise , Manager models : \"Tortoise\" = Tortoise () class Users ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) # name = fields.CharField(20, null=True) def __str__ ( self ): return f \"User { self . id } : { self . status } \" class Meta : manager = Manager () class Workers ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) def __str__ ( self ): return f \"Worker { self . id } : { self . status } \" class Meta : manager = Manager () class CoWorker ( models . Model ): id = models . IntField ( pk = True ) name = models . CharField ( max_length = 255 ) rltn = models . ForeignKeyField ( f \"models.Users\" , on_delete = models . CASCADE ) created_at = models . DatetimeField ( auto_now_add = True ) class Meta : manager = Manager () def __str__ ( self ): return f \"Co-Worker { self . id } : { self . name } \"","title":"models.py file"},{"location":"munch/","text":"","title":"Munch Class"},{"location":"request/","text":"","title":"Request Class"},{"location":"response/","text":"","title":"Response Class"},{"location":"tutorial/","text":"","title":"Tutorial"}]}