{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flask-Express - ExpressJs apis for Flask \u00b6 Introduction \u00b6 Flask-Express is here to give you the feel like ExpressJs while using the Flask app. Basically you can use the default Request and Response as two parameters of the view functions. Flask-Express comes with all the features of Flask with some extra features. We are using the munch module to provide the attribute-style access very similar to the Javascript. I think this is enough for the introdunction, let's dig into the key features and the installation process. Key Features \u00b6 It's provides you the feel of ExpressJs while using a Python based framework. The Resquest and The Response objects are easily available. It's clean and ExpressJs like apis provides a very readble syntex of your code. Support of Munch module gives a very advnatage and understandable attribute type parameters . Rich test cases support using pytest module. MKDocs based advanced documentation system. Installation \u00b6 The installation process is very similar to the other Python module installation process. You can install it directly from the PYPI using pip or from the source code . Install or update from PYPI \u00b6 python -m pip install -U Flask-Express Install from source code \u00b6 git clone https://github.com/marktennyson/flask-express && cd flask-express python -m pip install -U . A Basic Demo \u00b6 inbuilt flask_express . FlaskExpress class ``` python from flask_express import FlaskExpress app = FlaskExpress ( __name__ ) @app . get ( \"/\" ) def index ( req , res ): return res . json ( req . header ) @app . get ( \"/index-2\" ) async def index_2 ( req , res ): return res . json ( req . header )","title":"Flask-Express"},{"location":"#flask-express-expressjs-apis-for-flask","text":"","title":"Flask-Express - ExpressJs apis for Flask"},{"location":"#introduction","text":"Flask-Express is here to give you the feel like ExpressJs while using the Flask app. Basically you can use the default Request and Response as two parameters of the view functions. Flask-Express comes with all the features of Flask with some extra features. We are using the munch module to provide the attribute-style access very similar to the Javascript. I think this is enough for the introdunction, let's dig into the key features and the installation process.","title":"Introduction"},{"location":"#key-features","text":"It's provides you the feel of ExpressJs while using a Python based framework. The Resquest and The Response objects are easily available. It's clean and ExpressJs like apis provides a very readble syntex of your code. Support of Munch module gives a very advnatage and understandable attribute type parameters . Rich test cases support using pytest module. MKDocs based advanced documentation system.","title":"Key Features"},{"location":"#installation","text":"The installation process is very similar to the other Python module installation process. You can install it directly from the PYPI using pip or from the source code .","title":"Installation"},{"location":"#install-or-update-from-pypi","text":"python -m pip install -U Flask-Express","title":"Install or update from PYPI"},{"location":"#install-from-source-code","text":"git clone https://github.com/marktennyson/flask-express && cd flask-express python -m pip install -U .","title":"Install from source code"},{"location":"#a-basic-demo","text":"inbuilt flask_express . FlaskExpress class ``` python from flask_express import FlaskExpress app = FlaskExpress ( __name__ ) @app . get ( \"/\" ) def index ( req , res ): return res . json ( req . header ) @app . get ( \"/index-2\" ) async def index_2 ( req , res ): return res . json ( req . header )","title":"A Basic Demo"},{"location":"changelog/","text":"0.1.0 \u00b6 renamed the module name to flask-express from flaske to make it a extension of Flask. 0.1.1 \u00b6 Some typo fixed at README.md. Some typo fixed at Munch module. Added the proper logo. 0.1.2 \u00b6 Fixed flask-admin related issue. Added MKDocs based documentation. 0.1.3 [Upcoming] \u00b6 Fixed attachment directory related issue Now the user have the power to add custom attachment folder. showing proper error message when attached file is absent at the attachment directory. added more CamelCase method to the response.Response class. Fixed issubclass checking error for different contents at response.Response.send method. Fixed status_code method for response.Response class not working. Fixed response.Response.type method. Renamed response.Response.set_staus and response.Response.setStatus methods to response.Response.send_status and response.Response.sendStatus responsively. Added more documentation. docstring typo fixed at request.Request class.","title":"Changelog"},{"location":"changelog/#010","text":"renamed the module name to flask-express from flaske to make it a extension of Flask.","title":"0.1.0"},{"location":"changelog/#011","text":"Some typo fixed at README.md. Some typo fixed at Munch module. Added the proper logo.","title":"0.1.1"},{"location":"changelog/#012","text":"Fixed flask-admin related issue. Added MKDocs based documentation.","title":"0.1.2"},{"location":"changelog/#013-upcoming","text":"Fixed attachment directory related issue Now the user have the power to add custom attachment folder. showing proper error message when attached file is absent at the attachment directory. added more CamelCase method to the response.Response class. Fixed issubclass checking error for different contents at response.Response.send method. Fixed status_code method for response.Response class not working. Fixed response.Response.type method. Renamed response.Response.set_staus and response.Response.setStatus methods to response.Response.send_status and response.Response.sendStatus responsively. Added more documentation. docstring typo fixed at request.Request class.","title":"0.1.3 [Upcoming]"},{"location":"examples/","text":"Some basic examples of Flask-Express \u00b6 from flask_express import FlaskExpress from flask import session , current_app from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SECRET_KEY' ] = \"this is the secret key.\" # app.config['ATTACHMENTS_FOLDER'] = 'templates' @app . route ( \"/\" ) async def index ( req : Request , res : Response ): context = dict ( name = \"Aniket sarkar\" , description = \"basic demo page.\" ) return res . render ( \"index.html\" , context = context ) @app . route ( \"/set-status\" ) def set_statuser ( req : Request , res : Response ): # return res.Response(json.dumps({\"status\":200}), mimetype=\"application/json\") return res . send_status ( 404 ) . send ( \"your requested page is not found.\" ) @app . route ( \"/mrp\" ) def mrp ( req : Request , res : Response ): print ( current_app . config . get ( \"ATTACHMENTS_FOLDER\" )) res . type ( \"application/json\" ) print ( res . get ( \"Content-Type\" )) res . set_cookie ( \"cookie_key\" , 'aniketsarkar' ) print ( res . headers ) print ( app . config ) print ( app . config [ 'ATTACHMENTS_FOLDER' ]) return res . attachment ( \"hello.txt\" ) # attachment should be stored in attachment folder. @app . route ( \"/check-session\" ) def check_session ( req : Request , res : Response ): ss = dict ( session ) # print (ss) ss [ 'name1' ] = 'aniket' # session['name'] = \"aniket\" print ( ss ) return res . send ( \"data\" ) @app . route ( \"/check-session-2/\" ) def check_session_2 ( req : Request , res : Response ): print ( req . session ) return res . send ( \"data2\" ) @app . get ( \"/check-query-params/\" ) def check_query_params ( req : Request , res : Response ): res . json ( req . query ) @app . get ( \"/check-headers/\" ) def check_headers ( req : Request , res : Response ): return res . send ( req . header [ \"Accept-Encoding\" ]) @app . get ( \"/redirect\" ) def redirector ( req : Request , res : Response ): return res . send_status ( 308 ) . redirect ( \"https://www.google.com\" ) @app . get ( \"/set-session\" ) def set_session ( req : Request , res : Response ): req . session [ 'username' ] = 'aniketsarkar' return res . send ( 'OK' ) @app . get ( \"/get-session\" ) def get_session ( req : Request , res : Response ): username = req . session . get ( 'username' ) return res . send ( dict ( username = username )) @app . get ( \"/check-flash\" ) def check_flash ( req : Request , res : Response ): return res . send_status ( 403 ) . send ( dict ( name = \"test_simple_json\" )) @app . get ( \"/check-type\" ) def check_type ( req : Request , res : Response ): return res . type ( \"json\" ) . end () if __name__ == \"__main__\" : app . run ( debug = True , port = 8080 ) Example with flask-admin, flask-sqlalchemy \u00b6 app.py file \u00b6 from flask_express import FlaskExpress from flask_admin import Admin from flask_admin.contrib.sqla import ModelView from flask_migrate import Migrate import typing as t from models import * if t . TYPE_CHECKING : from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'sqlite:///db.sqlite3' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = True app . config [ 'SECRET_KEY' ] = 'world-secret-key' admin = Admin ( app , name = 'microblog' , template_mode = 'bootstrap4' ) db . init_app ( app ) admin . add_view ( ModelView ( AgentChangePasswordOtp , db . session )) _ = Migrate ( app , db ) @app . get ( '/' ) def index ( req : \"Request\" , response : \"Response\" ): return response . json ( name = 'index' ) @app . get ( \"/index\" ) def index_2 ( req : \"Request\" , res : \"Response\" ): return res . flash ( \"message\" ) . end ( 404 ) if __name__ == '__main__' : app . run ( debug = True ) models.py file \u00b6 from flask_sqlalchemy import SQLAlchemy from datetime import datetime db : \"SQLAlchemy\" = SQLAlchemy () class AgentChangePasswordOtp ( db . Model ): id = db . Column ( db . Integer , primary_key = True ) contactnumber = db . Column ( db . String ( 100 )) otp = db . Column ( db . String ( 100 )) created_on = db . Column ( db . DateTime , nullable = False , default = datetime . now ()) Example with Flask-Tortoise \u00b6 Flask-Tortoise provides a simple asynchronous ORM service. Here I have tried to add some examples of Flask-Express with Flask-Tortoise . app.py file \u00b6 # from flask import jsonify, Flask from flask_express import FlaskExpress from models import * from random import choice from script import GenerateData import typing as t if t . TYPE_CHECKING : from flask_express.typing import Request , Response STATUSES = [ \"New\" , \"Old\" , \"Gone\" ] app : \"FlaskExpress\" = FlaskExpress ( __name__ ) app . config [ 'TORTOISE_ORM_DATABASE_URI' ] = 'sqlite://db.sqlite3' app . config [ 'TORTOISE_ORM_MODELS' ] = \"models\" models . init_app ( app ) @app . get ( \"/\" ) async def list_all ( req : \"Request\" , res : \"Response\" ): users = await Users . all () workers = await Workers . all () co_workers = await CoWorker . all () return res . json ( { \"users\" : [ str ( user ) for user in users ], \"workers\" : [ str ( worker ) for worker in workers ], \"co-wrokers\" : [ str ( co_worker ) for co_worker in co_workers ]} ) @app . get ( \"/user\" ) async def add_user ( req : \"Request\" , res : \"Response\" , ): user = await Users . create ( status = choice ( STATUSES )) # nosec return str ( user ) @app . get ( \"/worker\" ) async def add_worker ( req : \"Request\" , res : \"Response\" , ): worker = await Workers . create ( status = choice ( STATUSES )) # nosec return str ( worker ) @app . get ( \"/get-worker\" ) async def get_worker ( req : \"Request\" , res : \"Response\" , ): worker : \"Workers\" = await Workers . get ( id = 1 ) return str ( worker . status ) @app . get ( \"/co-workers\" ) async def co_workers ( req : \"Request\" , res : \"Response\" , ): user = await Users . get ( id = 1 ) co_worker : \"CoWorker\" = await CoWorker . create ( name = \"Aniket Sarkar\" , rltn = user ) return str ( co_worker ) @app . get ( \"/get-coworker/<int:id>\" ) async def aniket ( req : \"Request\" , res : \"Response\" , id ): pk = id co_worker = await CoWorker . get_or_404 ( pk = pk , description = f \"user object not found at ID: { pk } \" ) return res . json ( name = str ( co_worker . name )) @app . get ( \"/delete-coworker/<int:id>\" ) async def delete_coworker ( id ): c = await CoWorker . get_or_404 ( id = id ) await c . delete () return \"object deleted\" @app . get ( \"/sarkar\" ) async def sarkar ( req : \"Request\" , res : \"Response\" , ): user = await Users . filter ( pk = 1 ) . first_or_404 () return res . json ( name = str ( user )) @app . get ( \"/paginate\" ) async def paginator ( req : \"Request\" , res : \"Response\" , ): user = await Users . paginate () print ( user ) return res . send ( \"none\" ) @app . get ( \"/create-data\" ) async def create_data ( req : \"Request\" , res : \"Response\" ): r1 = await GenerateData . generate_user () r2 = await GenerateData . generate_worker () r3 = await GenerateData . generate_co_worker () return res . send ( \"Done\" ) @app . get ( \"/create-co-worker\" ) async def create_co_worker ( req : \"Request\" , res : \"Response\" ): await GenerateData . generate_co_worker () return res . send ( \"Done\" ) if __name__ == '__main__' : app . run ( debug = True , port = 8080 ) models.py file \u00b6 from flask_tortoise import Tortoise , Manager models : \"Tortoise\" = Tortoise () class Users ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) # name = fields.CharField(20, null=True) def __str__ ( self ): return f \"User { self . id } : { self . status } \" class Meta : manager = Manager () class Workers ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) def __str__ ( self ): return f \"Worker { self . id } : { self . status } \" class Meta : manager = Manager () class CoWorker ( models . Model ): id = models . IntField ( pk = True ) name = models . CharField ( max_length = 255 ) rltn = models . ForeignKeyField ( f \"models.Users\" , on_delete = models . CASCADE ) created_at = models . DatetimeField ( auto_now_add = True ) class Meta : manager = Manager () def __str__ ( self ): return f \"Co-Worker { self . id } : { self . name } \"","title":"Examples"},{"location":"examples/#some-basic-examples-of-flask-express","text":"from flask_express import FlaskExpress from flask import session , current_app from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SECRET_KEY' ] = \"this is the secret key.\" # app.config['ATTACHMENTS_FOLDER'] = 'templates' @app . route ( \"/\" ) async def index ( req : Request , res : Response ): context = dict ( name = \"Aniket sarkar\" , description = \"basic demo page.\" ) return res . render ( \"index.html\" , context = context ) @app . route ( \"/set-status\" ) def set_statuser ( req : Request , res : Response ): # return res.Response(json.dumps({\"status\":200}), mimetype=\"application/json\") return res . send_status ( 404 ) . send ( \"your requested page is not found.\" ) @app . route ( \"/mrp\" ) def mrp ( req : Request , res : Response ): print ( current_app . config . get ( \"ATTACHMENTS_FOLDER\" )) res . type ( \"application/json\" ) print ( res . get ( \"Content-Type\" )) res . set_cookie ( \"cookie_key\" , 'aniketsarkar' ) print ( res . headers ) print ( app . config ) print ( app . config [ 'ATTACHMENTS_FOLDER' ]) return res . attachment ( \"hello.txt\" ) # attachment should be stored in attachment folder. @app . route ( \"/check-session\" ) def check_session ( req : Request , res : Response ): ss = dict ( session ) # print (ss) ss [ 'name1' ] = 'aniket' # session['name'] = \"aniket\" print ( ss ) return res . send ( \"data\" ) @app . route ( \"/check-session-2/\" ) def check_session_2 ( req : Request , res : Response ): print ( req . session ) return res . send ( \"data2\" ) @app . get ( \"/check-query-params/\" ) def check_query_params ( req : Request , res : Response ): res . json ( req . query ) @app . get ( \"/check-headers/\" ) def check_headers ( req : Request , res : Response ): return res . send ( req . header [ \"Accept-Encoding\" ]) @app . get ( \"/redirect\" ) def redirector ( req : Request , res : Response ): return res . send_status ( 308 ) . redirect ( \"https://www.google.com\" ) @app . get ( \"/set-session\" ) def set_session ( req : Request , res : Response ): req . session [ 'username' ] = 'aniketsarkar' return res . send ( 'OK' ) @app . get ( \"/get-session\" ) def get_session ( req : Request , res : Response ): username = req . session . get ( 'username' ) return res . send ( dict ( username = username )) @app . get ( \"/check-flash\" ) def check_flash ( req : Request , res : Response ): return res . send_status ( 403 ) . send ( dict ( name = \"test_simple_json\" )) @app . get ( \"/check-type\" ) def check_type ( req : Request , res : Response ): return res . type ( \"json\" ) . end () if __name__ == \"__main__\" : app . run ( debug = True , port = 8080 )","title":"Some basic examples of Flask-Express"},{"location":"examples/#example-with-flask-admin-flask-sqlalchemy","text":"","title":"Example with flask-admin, flask-sqlalchemy"},{"location":"examples/#apppy-file","text":"from flask_express import FlaskExpress from flask_admin import Admin from flask_admin.contrib.sqla import ModelView from flask_migrate import Migrate import typing as t from models import * if t . TYPE_CHECKING : from flask_express.typing import Request , Response app = FlaskExpress ( __name__ ) app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'sqlite:///db.sqlite3' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = True app . config [ 'SECRET_KEY' ] = 'world-secret-key' admin = Admin ( app , name = 'microblog' , template_mode = 'bootstrap4' ) db . init_app ( app ) admin . add_view ( ModelView ( AgentChangePasswordOtp , db . session )) _ = Migrate ( app , db ) @app . get ( '/' ) def index ( req : \"Request\" , response : \"Response\" ): return response . json ( name = 'index' ) @app . get ( \"/index\" ) def index_2 ( req : \"Request\" , res : \"Response\" ): return res . flash ( \"message\" ) . end ( 404 ) if __name__ == '__main__' : app . run ( debug = True )","title":"app.py file"},{"location":"examples/#modelspy-file","text":"from flask_sqlalchemy import SQLAlchemy from datetime import datetime db : \"SQLAlchemy\" = SQLAlchemy () class AgentChangePasswordOtp ( db . Model ): id = db . Column ( db . Integer , primary_key = True ) contactnumber = db . Column ( db . String ( 100 )) otp = db . Column ( db . String ( 100 )) created_on = db . Column ( db . DateTime , nullable = False , default = datetime . now ())","title":"models.py file"},{"location":"examples/#example-with-flask-tortoise","text":"Flask-Tortoise provides a simple asynchronous ORM service. Here I have tried to add some examples of Flask-Express with Flask-Tortoise .","title":"Example with Flask-Tortoise"},{"location":"examples/#apppy-file_1","text":"# from flask import jsonify, Flask from flask_express import FlaskExpress from models import * from random import choice from script import GenerateData import typing as t if t . TYPE_CHECKING : from flask_express.typing import Request , Response STATUSES = [ \"New\" , \"Old\" , \"Gone\" ] app : \"FlaskExpress\" = FlaskExpress ( __name__ ) app . config [ 'TORTOISE_ORM_DATABASE_URI' ] = 'sqlite://db.sqlite3' app . config [ 'TORTOISE_ORM_MODELS' ] = \"models\" models . init_app ( app ) @app . get ( \"/\" ) async def list_all ( req : \"Request\" , res : \"Response\" ): users = await Users . all () workers = await Workers . all () co_workers = await CoWorker . all () return res . json ( { \"users\" : [ str ( user ) for user in users ], \"workers\" : [ str ( worker ) for worker in workers ], \"co-wrokers\" : [ str ( co_worker ) for co_worker in co_workers ]} ) @app . get ( \"/user\" ) async def add_user ( req : \"Request\" , res : \"Response\" , ): user = await Users . create ( status = choice ( STATUSES )) # nosec return str ( user ) @app . get ( \"/worker\" ) async def add_worker ( req : \"Request\" , res : \"Response\" , ): worker = await Workers . create ( status = choice ( STATUSES )) # nosec return str ( worker ) @app . get ( \"/get-worker\" ) async def get_worker ( req : \"Request\" , res : \"Response\" , ): worker : \"Workers\" = await Workers . get ( id = 1 ) return str ( worker . status ) @app . get ( \"/co-workers\" ) async def co_workers ( req : \"Request\" , res : \"Response\" , ): user = await Users . get ( id = 1 ) co_worker : \"CoWorker\" = await CoWorker . create ( name = \"Aniket Sarkar\" , rltn = user ) return str ( co_worker ) @app . get ( \"/get-coworker/<int:id>\" ) async def aniket ( req : \"Request\" , res : \"Response\" , id ): pk = id co_worker = await CoWorker . get_or_404 ( pk = pk , description = f \"user object not found at ID: { pk } \" ) return res . json ( name = str ( co_worker . name )) @app . get ( \"/delete-coworker/<int:id>\" ) async def delete_coworker ( id ): c = await CoWorker . get_or_404 ( id = id ) await c . delete () return \"object deleted\" @app . get ( \"/sarkar\" ) async def sarkar ( req : \"Request\" , res : \"Response\" , ): user = await Users . filter ( pk = 1 ) . first_or_404 () return res . json ( name = str ( user )) @app . get ( \"/paginate\" ) async def paginator ( req : \"Request\" , res : \"Response\" , ): user = await Users . paginate () print ( user ) return res . send ( \"none\" ) @app . get ( \"/create-data\" ) async def create_data ( req : \"Request\" , res : \"Response\" ): r1 = await GenerateData . generate_user () r2 = await GenerateData . generate_worker () r3 = await GenerateData . generate_co_worker () return res . send ( \"Done\" ) @app . get ( \"/create-co-worker\" ) async def create_co_worker ( req : \"Request\" , res : \"Response\" ): await GenerateData . generate_co_worker () return res . send ( \"Done\" ) if __name__ == '__main__' : app . run ( debug = True , port = 8080 )","title":"app.py file"},{"location":"examples/#modelspy-file_1","text":"from flask_tortoise import Tortoise , Manager models : \"Tortoise\" = Tortoise () class Users ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) # name = fields.CharField(20, null=True) def __str__ ( self ): return f \"User { self . id } : { self . status } \" class Meta : manager = Manager () class Workers ( models . Model ): id = models . IntField ( pk = True ) status = models . CharField ( 20 ) def __str__ ( self ): return f \"Worker { self . id } : { self . status } \" class Meta : manager = Manager () class CoWorker ( models . Model ): id = models . IntField ( pk = True ) name = models . CharField ( max_length = 255 ) rltn = models . ForeignKeyField ( f \"models.Users\" , on_delete = models . CASCADE ) created_at = models . DatetimeField ( auto_now_add = True ) class Meta : manager = Manager () def __str__ ( self ): return f \"Co-Worker { self . id } : { self . name } \"","title":"models.py file"},{"location":"request/","text":"Request Class \u00b6 Flask-Express has it's own munch based Request class to get all the request based params. API of Request Class \u00b6 class flask_express.request.Request(*wargs, **kwargs) Bases : flask.wrappers.Request The default response class for the flask-express app. property body : Type[flask_express.munch.Munch] \u00b6 it provides you the form based data. property header : Type[flask_express.munch.Munch] \u00b6 it provides you the headers based data. property json : Type[flask_express.munch.Munch] \u00b6 it provides you the json based data. property query : Type[flask_express.munch.Munch] \u00b6 it provides you the args based data. property session : Type[flask.session.SessionMixin] \u00b6 it provides you the default session object of flask globals as a property of request.Request class.","title":"Request Class"},{"location":"request/#request-class","text":"Flask-Express has it's own munch based Request class to get all the request based params.","title":"Request Class"},{"location":"request/#api-of-request-class","text":"class flask_express.request.Request(*wargs, **kwargs) Bases : flask.wrappers.Request The default response class for the flask-express app.","title":"API of Request Class"},{"location":"request/#property-body-typeflask_expressmunchmunch","text":"it provides you the form based data.","title":"property body: Type[flask_express.munch.Munch]"},{"location":"request/#property-header-typeflask_expressmunchmunch","text":"it provides you the headers based data.","title":"property header: Type[flask_express.munch.Munch]"},{"location":"request/#property-json-typeflask_expressmunchmunch","text":"it provides you the json based data.","title":"property json: Type[flask_express.munch.Munch]"},{"location":"request/#property-query-typeflask_expressmunchmunch","text":"it provides you the args based data.","title":"property query: Type[flask_express.munch.Munch]"},{"location":"request/#property-session-typeflasksessionsessionmixin","text":"it provides you the default session object of flask globals as a property of request.Request class.","title":"property session: Type[flask.session.SessionMixin]"},{"location":"response/","text":"Response Class \u00b6 Flask-Express has it's own munch based Response class to get all the response based params. API of Response Class \u00b6 class flask_express.response.Response(*wargs, **kwargs) Bases : flask.wrappers.Response The default response class for flask-express app. All the available methods are listed below: \u00b6 attachment(file_name: str) \u00b6 send the attachments by using this method. The default attachment folder name is attachments. You can always change it by changing the config parameter. the config parameter is ATTACHMENTS_FOLDER. Parameters file_name \u2013 the file you want to server as attachment. @app . route ( '/attachments' ) def attach ( req , res ): filename = req . query . filename return res . attachment ( file_name ) clear_cookie(key: str, path: str = '/', domain: Optional[str] = None, secure: bool = False, httponly: bool = False, samesite: Optional[str] = None)\u2192 Type[flask_express.response.Response] \u00b6 Clear a cookie. Fails silently if key doesn\u2019t exist. Parameters key \u2013 the key (name) of the cookie to be deleted. path \u2013 if the cookie that should be deleted was limited to a path, the path has to be defined here. domain \u2013 if the cookie that should be deleted was limited to a domain, that domain has to be defined here. secure \u2013 If True, the cookie will only be available via HTTPS. httponly \u2013 Disallow JavaScript access to the cookie. samesite \u2013 Limit the scope of the cookie to only be attached to requests that are \u201csame-site\u201d. end(code: Optional[int] = None) \u00b6 end the current resonse process. :param code: provide the web error code, if you want to close this response with a http error. for example: @app . route ( \"/end\" ) def ender ( req , res ): return res . end () #or return res . end ( 404 ) # to raise a 404 error. flash(message: str, category: str = 'info')\u2192 Type[flask_express.response.Response] \u00b6 to flash a message. Parameters message \u2013 the message to flash. category \u2013 the category of flash message. Default is \u201cinfo\u201d. for example: @app . route ( '/flash' ) def flasher ( req , res ): return res . flash ( \"this is the flash message\" ) . end () get(key: str)\u2192 str \u00b6 get the response headers. Parameters key \u2013 the key to get the headers from response. For example: @app . route ( \u201c / get \u201d ) def getter ( req , res ): print ( res . get ( \u201c Content - Type \u201d )) return res . end () json(*wargs: Any, kwargs: Any)\u2192 Type[flask_express.response.Response]** \u00b6 return the json seriliazed data. Parameters wargs \u2013 dict or list type value. kwargs \u2013 kwargs type value. it will create a dictionary with the provided values of kwargs. for example: @app . route ( \"/json\" ) def jsoner ( req , res ): return res . json ( name = \"aniket sarkar\" ) #or return res . json ({ 'name' : 'aniket sarkar' }) #or return res . json ([ 1 , 2 , 3 , 4 ]) make_response(response: Optional[Union[Iterable[bytes], bytes, Iterable[str], str]] = None, status: Optional[Union[int, str, HTTPStatus]] = None, headers: Optional[Union[Mapping[str, Union[str, int, Iterable[Union[str, int]]]], Iterable[Tuple[str, Union[str, int]]]]] = None, mimetype: Optional[str] = None, content_type: Optional[str] = None, direct_passthrough: bool = False)\u2192 Type[ResponseBase] \u00b6 the base function for this class to create the final response. redirect(route: str) \u00b6 redirect to specified route. Parameters route \u2013 str based value, the default path where you want to redirect. for example: @app . post ( '/login' ) def login ( req , res ): #if login success return res . redirect ( '/dashboard' ) render(template_or_raw: str, *wargs: Any, context: Any)\u2192 Type[str]** \u00b6 Renders a html and sends the rendered HTML string to the client. Parameters template_or_raw \u2013 provide the template name or the html string to be rendered. wargs \u2013 The dictionary type context for the jinja2 template. context \u2013 the kwargs type context for the jinja2 template. For example: @app . route ( '/render' ) def renderer ( req , res ): context = dict ( name = \"Aniket Sarkar\" , planet = \"Pluto\" ) return res . render ( \"index.html\" , context ) #or return res . render ( \"index.html\" , name = \"Aniket Sarkar\" , planet = \"Pluto\" ) send(content: Union[str, dict, List[Any]])\u2192 Type[flask_express.response.Response] \u00b6 Sends the HTTP response. Parameters content \u2013 the content to send. for example: @app . route ( \"/send\" ) def sender ( req , res ): return res . send ( \"hello world\" ) #or return res . send ( \"<h1>hello world</h1>\" ) #or return res . set_status ( 404 ) . send ( \"not found\" ) send_file(path_or_file: Union[PathLike, str, BinaryIO], mimetype: Optional[str] = None, as_attachment: bool = False, download_name: Optional[str] = None, attachment_filename: Optional[str] = None, conditional: bool = True, etag: Union[bool, str] = True, add_etags: Optional[bool] = None, last_modified: Optional[Union[datetime, int, float]] = None, max_age: Optional[Union[int, Callable[[Optional[str]], Optional[int]]]] = None, cache_timeout: Optional[int] = None)\u2192 Type[Response] \u00b6 Send the contents of a file to the client. Its internally using the send_file method from werkzeug. Parameters path_or_file \u2013 The path to the file to send, relative to the current working directory if a relative path is given. Alternatively, a file-like object opened in binary mode. Make sure the file pointer is seeked to the start of the data. mimetype : The MIME type to send for the file. If not provided, it will try to detect it from the file name. as_attachment \u2013 Indicate to a browser that it should offer to save the file instead of displaying it. download_name \u2013 The default name browsers will use when saving the file. Defaults to the passed file name. conditional \u2013 Enable conditional and range responses based on request headers. Requires passing a file path and environ. etag \u2013 Calculate an ETag for the file, which requires passing a file path. Can also be a string to use instead. last_modified \u2013 The last modified time to send for the file, in seconds. If not provided, it will try to detect it from the file path. max_age \u2013 How long the client should cache the file, in seconds. If set, Cache-Control will be public, otherwise it will be no-cache to prefer conditional caching. set(*wargs) \u00b6 set the default header. Parameters wargs \u2013 dictionary or Headers type data. For example: @app . route ( \"/header-seter\" ) def header_setter ( req , res ): res . set ( 'Content-Type' , 'application/json' ) #or res . set ({ 'Content-Type' : 'application/json' }) return res . end () set_cookie(key: str, value: str = '', max_age: Optional[Union[timedelta, int]] = None, expires: Optional[Union[str, datetime.datetime, int, float]] = None, path: Optional[str] = '/', domain: Optional[str] = None, secure: bool = False, httponly: bool = False, samesite: Optional[str] = None)\u2192 Type[Response] \u00b6 Sets a cookie. A warning is raised if the size of the cookie header exceeds max_cookie_size, but the header will still be set. Parameters key \u2013 the key (name) of the cookie to be set. value \u2013 the value of the cookie. max_age \u2013 should be a number of seconds, or None (default) if the cookie should last only as long as the client\u2019s browser session. expires \u2013 should be a datetime object or UNIX timestamp. path \u2013 limits the cookie to a given path, per default it will span the whole domain. domain \u2013 if you want to set a cross-domain cookie. For example, domain=\".example.com\" will set a cookie that is readable by the domain www.example.com, foo.example.com etc. Otherwise, a cookie will only be readable by the domain that set it. secure \u2013 If True, the cookie will only be available via HTTPS. httponly \u2013 Disallow JavaScript access to the cookie. samesite \u2013 Limit the scope of the cookie to only be attached to requests that are \u201csame-site\u201d. send_status(code: int)\u2192 Type[flask_express.response.Response] \u00b6 set the web response status code. Parameters code - The web response status. For example: @app . route ( \"/send-status\" ) def send_statuser ( req , res ): return res . send_status ( 404 ) . send ( \"your requested page is not found.\" ) type(type: str) \u00b6 Sets the Content-Type HTTP header to the MIME type as determined by the specified type. Parameters type \u2013 The desired mine type to set. @app . route ( \"/set-mime\" ) def mimer ( req , res ): res . type ( 'application/json' ) #or res . type ( \".html\" ) #or res . type ( \"json\" )","title":"Response Class"},{"location":"response/#response-class","text":"Flask-Express has it's own munch based Response class to get all the response based params.","title":"Response Class"},{"location":"response/#api-of-response-class","text":"class flask_express.response.Response(*wargs, **kwargs) Bases : flask.wrappers.Response The default response class for flask-express app.","title":"API of Response Class"},{"location":"response/#all-the-available-methods-are-listed-below","text":"","title":"All the available methods are listed below:"},{"location":"response/#attachmentfile_name-str","text":"send the attachments by using this method. The default attachment folder name is attachments. You can always change it by changing the config parameter. the config parameter is ATTACHMENTS_FOLDER. Parameters file_name \u2013 the file you want to server as attachment. @app . route ( '/attachments' ) def attach ( req , res ): filename = req . query . filename return res . attachment ( file_name )","title":"attachment(file_name: str)"},{"location":"response/#clear_cookiekey-str-path-str-domain-optionalstr-none-secure-bool-false-httponly-bool-false-samesite-optionalstr-none-typeflask_expressresponseresponse","text":"Clear a cookie. Fails silently if key doesn\u2019t exist. Parameters key \u2013 the key (name) of the cookie to be deleted. path \u2013 if the cookie that should be deleted was limited to a path, the path has to be defined here. domain \u2013 if the cookie that should be deleted was limited to a domain, that domain has to be defined here. secure \u2013 If True, the cookie will only be available via HTTPS. httponly \u2013 Disallow JavaScript access to the cookie. samesite \u2013 Limit the scope of the cookie to only be attached to requests that are \u201csame-site\u201d.","title":"clear_cookie(key: str, path: str = '/', domain: Optional[str] = None, secure: bool = False, httponly: bool = False, samesite: Optional[str] = None)\u2192 Type[flask_express.response.Response]"},{"location":"response/#endcode-optionalint-none","text":"end the current resonse process. :param code: provide the web error code, if you want to close this response with a http error. for example: @app . route ( \"/end\" ) def ender ( req , res ): return res . end () #or return res . end ( 404 ) # to raise a 404 error.","title":"end(code: Optional[int] = None)"},{"location":"response/#flashmessage-str-category-str-info-typeflask_expressresponseresponse","text":"to flash a message. Parameters message \u2013 the message to flash. category \u2013 the category of flash message. Default is \u201cinfo\u201d. for example: @app . route ( '/flash' ) def flasher ( req , res ): return res . flash ( \"this is the flash message\" ) . end ()","title":"flash(message: str, category: str = 'info')\u2192 Type[flask_express.response.Response]"},{"location":"response/#getkey-str-str","text":"get the response headers. Parameters key \u2013 the key to get the headers from response. For example: @app . route ( \u201c / get \u201d ) def getter ( req , res ): print ( res . get ( \u201c Content - Type \u201d )) return res . end ()","title":"get(key: str)\u2192 str"},{"location":"response/#jsonwargs-any-kwargs-any-typeflask_expressresponseresponse","text":"return the json seriliazed data. Parameters wargs \u2013 dict or list type value. kwargs \u2013 kwargs type value. it will create a dictionary with the provided values of kwargs. for example: @app . route ( \"/json\" ) def jsoner ( req , res ): return res . json ( name = \"aniket sarkar\" ) #or return res . json ({ 'name' : 'aniket sarkar' }) #or return res . json ([ 1 , 2 , 3 , 4 ])","title":"json(*wargs: Any, kwargs: Any)\u2192 Type[flask_express.response.Response]**"},{"location":"response/#make_responseresponse-optionalunioniterablebytes-bytes-iterablestr-str-none-status-optionalunionint-str-httpstatus-none-headers-optionalunionmappingstr-unionstr-int-iterableunionstr-int-iterabletuplestr-unionstr-int-none-mimetype-optionalstr-none-content_type-optionalstr-none-direct_passthrough-bool-false-typeresponsebase","text":"the base function for this class to create the final response.","title":"make_response(response: Optional[Union[Iterable[bytes], bytes, Iterable[str], str]] = None, status: Optional[Union[int, str, HTTPStatus]] = None, headers: Optional[Union[Mapping[str, Union[str, int, Iterable[Union[str, int]]]], Iterable[Tuple[str, Union[str, int]]]]] = None, mimetype: Optional[str] = None, content_type: Optional[str] = None, direct_passthrough: bool = False)\u2192 Type[ResponseBase]"},{"location":"response/#redirectroute-str","text":"redirect to specified route. Parameters route \u2013 str based value, the default path where you want to redirect. for example: @app . post ( '/login' ) def login ( req , res ): #if login success return res . redirect ( '/dashboard' )","title":"redirect(route: str)"},{"location":"response/#rendertemplate_or_raw-str-wargs-any-context-any-typestr","text":"Renders a html and sends the rendered HTML string to the client. Parameters template_or_raw \u2013 provide the template name or the html string to be rendered. wargs \u2013 The dictionary type context for the jinja2 template. context \u2013 the kwargs type context for the jinja2 template. For example: @app . route ( '/render' ) def renderer ( req , res ): context = dict ( name = \"Aniket Sarkar\" , planet = \"Pluto\" ) return res . render ( \"index.html\" , context ) #or return res . render ( \"index.html\" , name = \"Aniket Sarkar\" , planet = \"Pluto\" )","title":"render(template_or_raw: str, *wargs: Any, context: Any)\u2192 Type[str]**"},{"location":"response/#sendcontent-unionstr-dict-listany-typeflask_expressresponseresponse","text":"Sends the HTTP response. Parameters content \u2013 the content to send. for example: @app . route ( \"/send\" ) def sender ( req , res ): return res . send ( \"hello world\" ) #or return res . send ( \"<h1>hello world</h1>\" ) #or return res . set_status ( 404 ) . send ( \"not found\" )","title":"send(content: Union[str, dict, List[Any]])\u2192 Type[flask_express.response.Response]"},{"location":"response/#send_filepath_or_file-unionpathlike-str-binaryio-mimetype-optionalstr-none-as_attachment-bool-false-download_name-optionalstr-none-attachment_filename-optionalstr-none-conditional-bool-true-etag-unionbool-str-true-add_etags-optionalbool-none-last_modified-optionaluniondatetime-int-float-none-max_age-optionalunionint-callableoptionalstr-optionalint-none-cache_timeout-optionalint-none-typeresponse","text":"Send the contents of a file to the client. Its internally using the send_file method from werkzeug. Parameters path_or_file \u2013 The path to the file to send, relative to the current working directory if a relative path is given. Alternatively, a file-like object opened in binary mode. Make sure the file pointer is seeked to the start of the data. mimetype : The MIME type to send for the file. If not provided, it will try to detect it from the file name. as_attachment \u2013 Indicate to a browser that it should offer to save the file instead of displaying it. download_name \u2013 The default name browsers will use when saving the file. Defaults to the passed file name. conditional \u2013 Enable conditional and range responses based on request headers. Requires passing a file path and environ. etag \u2013 Calculate an ETag for the file, which requires passing a file path. Can also be a string to use instead. last_modified \u2013 The last modified time to send for the file, in seconds. If not provided, it will try to detect it from the file path. max_age \u2013 How long the client should cache the file, in seconds. If set, Cache-Control will be public, otherwise it will be no-cache to prefer conditional caching.","title":"send_file(path_or_file: Union[PathLike, str, BinaryIO], mimetype: Optional[str] = None, as_attachment: bool = False, download_name: Optional[str] = None, attachment_filename: Optional[str] = None, conditional: bool = True, etag: Union[bool, str] = True, add_etags: Optional[bool] = None, last_modified: Optional[Union[datetime, int, float]] = None, max_age: Optional[Union[int, Callable[[Optional[str]], Optional[int]]]] = None, cache_timeout: Optional[int] = None)\u2192 Type[Response]"},{"location":"response/#setwargs","text":"set the default header. Parameters wargs \u2013 dictionary or Headers type data. For example: @app . route ( \"/header-seter\" ) def header_setter ( req , res ): res . set ( 'Content-Type' , 'application/json' ) #or res . set ({ 'Content-Type' : 'application/json' }) return res . end ()","title":"set(*wargs)"},{"location":"response/#set_cookiekey-str-value-str-max_age-optionaluniontimedelta-int-none-expires-optionalunionstr-datetimedatetime-int-float-none-path-optionalstr-domain-optionalstr-none-secure-bool-false-httponly-bool-false-samesite-optionalstr-none-typeresponse","text":"Sets a cookie. A warning is raised if the size of the cookie header exceeds max_cookie_size, but the header will still be set. Parameters key \u2013 the key (name) of the cookie to be set. value \u2013 the value of the cookie. max_age \u2013 should be a number of seconds, or None (default) if the cookie should last only as long as the client\u2019s browser session. expires \u2013 should be a datetime object or UNIX timestamp. path \u2013 limits the cookie to a given path, per default it will span the whole domain. domain \u2013 if you want to set a cross-domain cookie. For example, domain=\".example.com\" will set a cookie that is readable by the domain www.example.com, foo.example.com etc. Otherwise, a cookie will only be readable by the domain that set it. secure \u2013 If True, the cookie will only be available via HTTPS. httponly \u2013 Disallow JavaScript access to the cookie. samesite \u2013 Limit the scope of the cookie to only be attached to requests that are \u201csame-site\u201d.","title":"set_cookie(key: str, value: str = '', max_age: Optional[Union[timedelta, int]] = None, expires: Optional[Union[str, datetime.datetime, int, float]] = None, path: Optional[str] = '/', domain: Optional[str] = None, secure: bool = False, httponly: bool = False, samesite: Optional[str] = None)\u2192 Type[Response]"},{"location":"response/#send_statuscode-int-typeflask_expressresponseresponse","text":"set the web response status code. Parameters code - The web response status. For example: @app . route ( \"/send-status\" ) def send_statuser ( req , res ): return res . send_status ( 404 ) . send ( \"your requested page is not found.\" )","title":"send_status(code: int)\u2192 Type[flask_express.response.Response]"},{"location":"response/#typetype-str","text":"Sets the Content-Type HTTP header to the MIME type as determined by the specified type. Parameters type \u2013 The desired mine type to set. @app . route ( \"/set-mime\" ) def mimer ( req , res ): res . type ( 'application/json' ) #or res . type ( \".html\" ) #or res . type ( \"json\" )","title":"type(type: str)"},{"location":"tutorial/","text":"","title":"Tutorial"}]}